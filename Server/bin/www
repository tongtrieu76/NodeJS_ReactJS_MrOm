#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

var db = require('../db/nosql');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

var server = require("http").Server(app);
var io = require("socket.io")(server);




// Local.Local.find().exec((err,local)=>
// {
// console.log(local);
// })
var arr = [];


io.on("connection", function (socket) {
 
  // io.sockets.emit("server_send",arr)
  db.Local.find().exec((err, local) => {
    for (let i = 0; i < local.length; i++) {
       arr.push([local[i].local_X, local[i].local_Y]);
     }
     console.log(arr);
   
   })
  console.log("da co ket noi" + socket.id);
  io.sockets.emit("server_send", arr)
  socket.on("client_send", function (data) {
    // var arrTemp = [];
    // arrTemp.push(data);

    // var iterator = arrTemp[0].values();



    //  db.Local.create( { local_X: iterator.next().value, local_Y: iterator.next().value });


    
    
   
  });
  while (arr.length) {
    arr.pop();
  }
  // socket.on("Client-sent-data", function(data)
  // 	{

  //             socket.emit("Server-sent-data", data);
  // 	});
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
